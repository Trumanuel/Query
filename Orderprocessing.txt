1. List the Order# and Ship_date for all orders shipped from Warehouse#"W2".
select order_id,ship_date from Shipments where warehouse_id=0001;

2.List the Warehouse information from which the Customer named "Kumar" was supplied his
orders. Produce a listing of Order#, Warehouse#.
select order_id,warehouse_id from Warehouses natural join Shipments where order_id in
(select order_id from Orders where cust_id in (Select cust_id from Customers where cname like
"%Kumar%"));

3.Produce a listing: Cname, #ofOrders, Avg_Order_Amt, where themiddle column is the total
number of orders by the customer and the last column is the average order amountfor that
customer. (Use aggregate functions)
select cname, COUNT(*) as no_of_orders, AVG(order_amt) as avg_order_amt
from Customers c, Orders o
where c.cust_id=o.cust_id
group by cname;

4.Delete all orders for customer named "Kumar".
delete from Orders where cust_id = (select cust_id from Customers where cname like "%Kumar%");

5.Find the item with the maximum unit price.
select max(unitprice) from Items;

6.A trigger that updates order_amout based on quantity and unitprice of order_item
DELIMITER $$
create trigger UpdateOrderAmt
after insert on OrderItems
for each row
BEGIN
	update Orders set order_amt=(new.qty*(select distinct unitprice from Items NATURAL JOIN OrderItems where item_id=new.item_id)) where Orders.order_id=new.order_id;
END; $$
DELIMITER ;

INSERT INTO Orders VALUES
(006, "2020-12-23", 0004, 1200);

INSERT INTO OrderItems VALUES 
(006, 0001, 5); -- This will automatically update the Orders Table also

select * from Orders;

7.Create a viewto display orderIDand shipment date of all orders shipped from a warehouse 5.
create view ShipmentDatesFromWarehouse5 as
select order_id, ship_date
from Shipments
where warehouse_id=5;

select * from ShipmentDatesFromWarehouse5;
